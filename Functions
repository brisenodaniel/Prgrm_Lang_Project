```haskell
doubleMe :: Int -> Int --function declaration
doubleMe x = x + x  --function definition

doubleSmallNums x = if x < 100 x * 2 else x --conditional in function declaration


factorial :: Int -> Int --pattern matching
factorial 0 = 1
factorial x = x * factorial(x-1)



main = do
  putStrLn "The predecessor of 2 is: "
  print(/(x -> x-1) 2) --lambda function


progressReport :: Double -> String
progressReport grade
  | grade <= belowAverage = "You are currently failing this course" --using guards
  | grade <= average = "You are doing poorly in this course"
  | grade <= good = "You are around doing an average job in this course"
  | grade <= Excellent = "You are doing well in this course"
  | otherwise = "You are exceeding expectations in this course"
where Excellent = 90.0 --where clause
      good = 80.0
      average = 70.0
      belowAverage = 60.0

bmiTell :: Float -> Float -> String
bmiTell weight height
    | weight / height ^ 2 <= 18.5 = "You're underweight"
    | weight / height ^ 2 <= 25.0 = "You're at a normal body mass"
    | weight / height ^ 2 <= 30.0 = "You are overweight"
    | otherwise = "You are very overweight"

bmiTell :: Float -> Float -> String
bmiTell weight height
    | bmi <= 18.5 = "You are underweight"
    | bmi <= 25.0 = "You are at a normal body mass"
    | bmi <= 30.0 = "You are overweight"
    | otherwise   = "You are very overweight"
    where bmi = weight / height ^ 2

  --you can use the where clause to pattern matching
  --you can use the where clause to define functions

  --where bindings are syntactic constructs, let bindings are expressions
```
